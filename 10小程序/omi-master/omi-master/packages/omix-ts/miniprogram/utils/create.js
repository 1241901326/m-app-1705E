"use strict";
/*!
 *  omix v2.0.0 by dntzhang
 *  Github: https://github.com/Tencent/omi
 *  MIT Licensed.
*/
Object.defineProperty(exports, "__esModule", { value: true });
var obaa_1 = require("./obaa");
var path_1 = require("./path");
var ARRAYTYPE = '[object Array]';
var OBJECTTYPE = '[object Object]';
var FUNCTIONTYPE = '[object Function]';
var changes = [];
function create(store, option) {
    if (arguments.length === 2) {
        if (!store.instances) {
            store.instances = {};
        }
        if (!store.onChange) {
            store.onChange = function (fn) {
                changes.push(fn);
            };
        }
        if (!store.offChange) {
            store.offChange = function (fn) {
                for (var i = 0, len = changes.length; i < len; i++) {
                    if (changes[i] === fn) {
                        changes.splice(i, 1);
                        break;
                    }
                }
            };
        }
        getApp().globalData && (getApp().globalData.store = store);
        option.data = store.data;
        observeStore(store);
        var onLoad_1 = option.onLoad;
        option.onLoad = function (e) {
            this.store = store;
            option.use && (this.__updatePath = path_1.getPath(option.use));
            this.__use = option.use;
            store.instances[this.route] = [];
            store.instances[this.route].push(this);
            if (!option.data.___walked) {
                walk(this.store.data);
            }
            this.setData(option.data);
            var using = path_1.getUsing(store.data, option.use);
            using && this.setData(using);
            onLoad_1 && onLoad_1.call(this, e);
        };
        Page(option);
    }
    else {
        var ready_1 = (store.lifetimes && store.lifetimes.ready) || store.ready;
        store.lifetimes = store.lifetimes || {};
        store.ready = store.lifetimes.ready = function () {
            var page = getCurrentPages()[getCurrentPages().length - 1];
            store.use && (this.__updatePath = path_1.getPath(store.use));
            this.store = page.store;
            this.__use = store.use;
            store.data = this.store.data;
            this.setData(store.data);
            var using = path_1.getUsing(this.store.data, store.use);
            using && this.setData(using);
            this.store.instances[page.route].push(this);
            ready_1 && ready_1.call(this);
        };
        Component(store);
    }
}
function observeStore(store) {
    obaa_1.default(store.data, function (prop, value, old, path) {
        var patch = {};
        if (prop.indexOf('Array-push') === 0) {
            var dl = value.length - old.length;
            for (var i = 0; i < dl; i++) {
                patch[path_1.fixPath(path + '-' + (old.length + i))] = value[(old.length + i)];
            }
        }
        else if (prop.indexOf('Array-') === 0) {
            patch[path_1.fixPath(path)] = value;
        }
        else {
            patch[path_1.fixPath(path + '-' + prop)] = value;
        }
        _update(patch, store);
    });
}
function _update(kv, store) {
    for (var key in store.instances) {
        store.instances[key].forEach(function (ins) {
            if (store.updateAll || ins.__updatePath && path_1.needUpdate(kv, ins.__updatePath)) {
                ins.setData.call(ins, kv);
                var using = path_1.getUsing(store.data, ins.__use);
                using && ins.setData(using);
                updateStoreByFnProp(ins, store.data);
            }
        });
    }
    changes.forEach(function (change) {
        change(kv);
    });
    store.debug && storeChangeLogger(store, kv);
}
function storeChangeLogger(store, diffResult) {
    try {
        var preState = wx.getStorageSync("CurrentState") || {};
        var title = "State Changed";
        console.groupCollapsed("%c  " + title + " %c " + Object.keys(diffResult), 'color:#e0c184; font-weight: bold', 'color:#f0a139; font-weight: bold');
        console.log("%c    Pre State", 'color:#ff65af; font-weight: bold', preState);
        console.log("%c Change State", 'color:#3d91cf; font-weight: bold', diffResult);
        console.log("%c   Next State", 'color:#2c9f67; font-weight: bold', store.data);
        console.groupEnd();
        wx.setStorageSync("CurrentState", store.data);
    }
    catch (e) {
        console.log(e);
    }
}
function updateStoreByFnProp(ele, data) {
    if (data) {
        var patch = {};
        for (var key in data.__fnMapping) {
            patch[key] = data.__fnMapping[key].call(data);
        }
        ele.setData(patch);
    }
}
function getObjByPath(path, data) {
    var arr = path.replace(/]/g, '').replace(/\[/g, '.').split('.');
    var len = arr.length;
    if (len > 1) {
        var current = data[arr[0]];
        for (var i = 1; i < len - 1; i++) {
            current = current[arr[i]];
        }
        return { obj: current, key: arr[len - 1] };
    }
    else {
        return { obj: data, key: arr[0] };
    }
}
function walk(data) {
    data.___walked = true;
    Object.keys(data).forEach(function (key) {
        var obj = data[key];
        var tp = type(obj);
        if (tp == FUNCTIONTYPE) {
            setProp(key, obj, data);
        }
        else if (tp == OBJECTTYPE) {
            Object.keys(obj).forEach(function (subKey) {
                _walk(obj[subKey], key + '.' + subKey, data);
            });
        }
        else if (tp == ARRAYTYPE) {
            obj.forEach(function (item, index) {
                _walk(item, key + '[' + index + ']', data);
            });
        }
    });
}
function _walk(obj, path, data) {
    var tp = type(obj);
    if (tp == FUNCTIONTYPE) {
        setProp(path, obj, data);
    }
    else if (tp == OBJECTTYPE) {
        Object.keys(obj).forEach(function (subKey) {
            _walk(obj[subKey], path + '.' + subKey, data);
        });
    }
    else if (tp == ARRAYTYPE) {
        obj.forEach(function (item, index) {
            _walk(item, path + '[' + index + ']', data);
        });
    }
}
function setProp(path, fn, data) {
    var ok = getObjByPath(path, data);
    data.__fnMapping = data.__fnMapping || {};
    data.__fnMapping[path] = fn;
    Object.defineProperty(ok.obj, ok.key, {
        enumerable: true,
        get: function () {
            return fn.call(ok.obj);
        },
        set: function () {
            console.warn('Please using this.data.method to set method prop of data!');
        }
    });
}
function type(obj) {
    return Object.prototype.toString.call(obj);
}
function updateByFnProp(ele, data) {
    var patch = {};
    for (var key in data.__fnMapping) {
        patch[key] = data.__fnMapping[key].call(ele.oData);
    }
    ele.setData(patch);
}
create.obaa = obaa_1.default;
exports.default = create;
//# sourceMappingURL=data:application/json;base64,